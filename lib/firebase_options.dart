// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'dart:developer' as developer;

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'show defaultTargetPlatform, kIsWeb, TargetPlatform;

 
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyD-v6rH-ORKnB_cbzlzqY72vsDzdBJzqhE',
    appId: '1:500878566916:web:37b34b760e0236b0bab751',
    messagingSenderId: '500878566916',
    projectId: 'smart-card-system-f1da1',
    authDomain: 'smart-card-system-f1da1.firebaseapp.com',
    storageBucket: 'smart-card-system-f1da1.firebasestorage.app',
    measurementId: 'G-9QJBCTFP59',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCOyoy73PNpub86fALIhdgqgl8KoRHI8kI',
    appId: '1:500878566916:android:20e8de38ba64b36fbab751',
    messagingSenderId: '500878566916',
    projectId: 'smart-card-system-f1da1',
    storageBucket: 'smart-card-system-f1da1.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyDgjMjEyYv4s7Dk4phZ6XRg7-RrcdBaXB4',
    appId: '1:500878566916:ios:ab52dd85fd34808dbab751',
    messagingSenderId: '500878566916',
    projectId: 'smart-card-system-f1da1',
    storageBucket: 'smart-card-system-f1da1.firebasestorage.app',
    iosClientId: '500878566916-saa8g3jlp2bol37srq99jik8bv2us89j.apps.googleusercontent.com',
    iosBundleId: 'com.example.smartCardAppDrivers',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyDgjMjEyYv4s7Dk4phZ6XRg7-RrcdBaXB4',
    appId: '1:500878566916:ios:ab52dd85fd34808dbab751',
    messagingSenderId: '500878566916',
    projectId: 'smart-card-system-f1da1',
    storageBucket: 'smart-card-system-f1da1.firebasestorage.app',
    iosClientId: '500878566916-saa8g3jlp2bol37srq99jik8bv2us89j.apps.googleusercontent.com',
    iosBundleId: 'com.example.smartCardAppDrivers',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyD-v6rH-ORKnB_cbzlzqY72vsDzdBJzqhE',
    appId: '1:500878566916:web:b20f2e2022fee2d1bab751',
    messagingSenderId: '500878566916',
    projectId: 'smart-card-system-f1da1',
    authDomain: 'smart-card-system-f1da1.firebaseapp.com',
    storageBucket: 'smart-card-system-f1da1.firebasestorage.app',
    measurementId: 'G-QH8N3JB0QY',
  );


  static Future<List<Map<String, dynamic>>> fetchRoutes() async {
    try {
      developer.log('Fetching routes from Firestore', name: 'FirestoreServices');
      final snapshot = await FirebaseFirestore.instance.collection('routes').get();
      if (snapshot.docs.isEmpty) {
        developer.log('No routes found in Firestore', name: 'FirestoreServices');
        return [];
      }
      final routes = snapshot.docs
          .map((doc) {
            final data = doc.data();
            final routeName = data['routeName'];
            if (routeName is String && routeName.isNotEmpty) {
              return {
                'id': doc.id,
                'name': routeName,
                'routeId': data['routeId'] ?? doc.id,
              };
            }
            developer.log('Invalid route data for doc ${doc.id}: routeName=$routeName', name: 'FirestoreServices');
            return null;
          })
          .where((route) => route != null)
          .cast<Map<String, dynamic>>()
          .toList();
      developer.log('Fetched ${routes.length} routes: ${routes.map((r) => r['id'])}', name: 'FirestoreServices');
      return routes;
    } catch (e, stackTrace) {
      developer.log('Error fetching routes: $e', name: 'FirestoreServices', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }
}
